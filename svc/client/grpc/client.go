// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package grpc provides a gRPC client for the Storagesvc service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/sns-storagesvc/proto"
	"github.com/mises-id/sns-storagesvc/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.StoragesvcServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var imageurlEndpoint endpoint.Endpoint
	{
		imageurlEndpoint = grpctransport.NewClient(
			conn,
			"storagesvc.Storagesvc",
			"ImageUrl",
			EncodeGRPCImageUrlRequest,
			DecodeGRPCImageUrlResponse,
			pb.ImageUrlResponse{},
			clientOptions...,
		).Endpoint()
	}

	var fuploadEndpoint endpoint.Endpoint
	{
		fuploadEndpoint = grpctransport.NewClient(
			conn,
			"storagesvc.Storagesvc",
			"FUpload",
			EncodeGRPCFUploadRequest,
			DecodeGRPCFUploadResponse,
			pb.FUploadResponse{},
			clientOptions...,
		).Endpoint()
	}

	var uploadEndpoint endpoint.Endpoint
	{
		uploadEndpoint = grpctransport.NewClient(
			conn,
			"storagesvc.Storagesvc",
			"Upload",
			EncodeGRPCUploadRequest,
			DecodeGRPCUploadResponse,
			pb.UploadResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		ImageUrlEndpoint: imageurlEndpoint,
		FUploadEndpoint:  fuploadEndpoint,
		UploadEndpoint:   uploadEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCImageUrlResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC imageurl reply to a user-domain imageurl response. Primarily useful in a client.
func DecodeGRPCImageUrlResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ImageUrlResponse)
	return reply, nil
}

// DecodeGRPCFUploadResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC fupload reply to a user-domain fupload response. Primarily useful in a client.
func DecodeGRPCFUploadResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.FUploadResponse)
	return reply, nil
}

// DecodeGRPCUploadResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC upload reply to a user-domain upload response. Primarily useful in a client.
func DecodeGRPCUploadResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UploadResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCImageUrlRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain imageurl request to a gRPC imageurl request. Primarily useful in a client.
func EncodeGRPCImageUrlRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ImageUrlRequest)
	return req, nil
}

// EncodeGRPCFUploadRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain fupload request to a gRPC fupload request. Primarily useful in a client.
func EncodeGRPCFUploadRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.FUploadRequest)
	return req, nil
}

// EncodeGRPCUploadRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain upload request to a gRPC upload request. Primarily useful in a client.
func EncodeGRPCUploadRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UploadRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
