// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/storagesvc/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC StoragesvcServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.StoragesvcServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// storagesvc

		imageurl: grpctransport.NewServer(
			endpoints.ImageUrlEndpoint,
			DecodeGRPCImageUrlRequest,
			EncodeGRPCImageUrlResponse,
			serverOptions...,
		),
		fupload: grpctransport.NewServer(
			endpoints.FUploadEndpoint,
			DecodeGRPCFUploadRequest,
			EncodeGRPCFUploadResponse,
			serverOptions...,
		),
		upload: grpctransport.NewServer(
			endpoints.UploadEndpoint,
			DecodeGRPCUploadRequest,
			EncodeGRPCUploadResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the StoragesvcServer interface
type grpcServer struct {
	imageurl grpctransport.Handler
	fupload  grpctransport.Handler
	upload   grpctransport.Handler
}

// Methods for grpcServer to implement StoragesvcServer interface

func (s *grpcServer) ImageUrl(ctx context.Context, req *pb.ImageUrlRequest) (*pb.ImageUrlResponse, error) {
	_, rep, err := s.imageurl.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ImageUrlResponse), nil
}

func (s *grpcServer) FUpload(ctx context.Context, req *pb.FUploadRequest) (*pb.FUploadResponse, error) {
	_, rep, err := s.fupload.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.FUploadResponse), nil
}

func (s *grpcServer) Upload(ctx context.Context, req *pb.UploadRequest) (*pb.UploadResponse, error) {
	_, rep, err := s.upload.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UploadResponse), nil
}

// Server Decode

// DecodeGRPCImageUrlRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC imageurl request to a user-domain imageurl request. Primarily useful in a server.
func DecodeGRPCImageUrlRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ImageUrlRequest)
	return req, nil
}

// DecodeGRPCFUploadRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC fupload request to a user-domain fupload request. Primarily useful in a server.
func DecodeGRPCFUploadRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.FUploadRequest)
	return req, nil
}

// DecodeGRPCUploadRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC upload request to a user-domain upload request. Primarily useful in a server.
func DecodeGRPCUploadRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UploadRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCImageUrlResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain imageurl response to a gRPC imageurl reply. Primarily useful in a server.
func EncodeGRPCImageUrlResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ImageUrlResponse)
	return resp, nil
}

// EncodeGRPCFUploadResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain fupload response to a gRPC fupload reply. Primarily useful in a server.
func EncodeGRPCFUploadResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.FUploadResponse)
	return resp, nil
}

// EncodeGRPCUploadResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain upload response to a gRPC upload reply. Primarily useful in a server.
func EncodeGRPCUploadResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UploadResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
