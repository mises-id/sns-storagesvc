// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storagesvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package storagesvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ImageUrlRequest struct {
	Img     string        `protobuf:"bytes,1,opt,name=img,proto3" json:"img,omitempty"`
	Options *ImageOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	Str     string        `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
}

func (m *ImageUrlRequest) Reset()         { *m = ImageUrlRequest{} }
func (m *ImageUrlRequest) String() string { return proto.CompactTextString(m) }
func (*ImageUrlRequest) ProtoMessage()    {}
func (*ImageUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{0}
}
func (m *ImageUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUrlRequest.Merge(m, src)
}
func (m *ImageUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUrlRequest proto.InternalMessageInfo

func (m *ImageUrlRequest) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *ImageUrlRequest) GetOptions() *ImageOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ImageUrlRequest) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type ImageUrlResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ImageUrlResponse) Reset()         { *m = ImageUrlResponse{} }
func (m *ImageUrlResponse) String() string { return proto.CompactTextString(m) }
func (*ImageUrlResponse) ProtoMessage()    {}
func (*ImageUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{1}
}
func (m *ImageUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUrlResponse.Merge(m, src)
}
func (m *ImageUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUrlResponse proto.InternalMessageInfo

func (m *ImageUrlResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ImageUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ResizeOptions struct {
	Width      uint64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height     uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Resize     bool   `protobuf:"varint,3,opt,name=resize,proto3" json:"resize,omitempty"`
	ResizeType string `protobuf:"bytes,4,opt,name=resize_type,json=resizeType,proto3" json:"resize_type,omitempty"`
}

func (m *ResizeOptions) Reset()         { *m = ResizeOptions{} }
func (m *ResizeOptions) String() string { return proto.CompactTextString(m) }
func (*ResizeOptions) ProtoMessage()    {}
func (*ResizeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{2}
}
func (m *ResizeOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeOptions.Merge(m, src)
}
func (m *ResizeOptions) XXX_Size() int {
	return m.Size()
}
func (m *ResizeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeOptions proto.InternalMessageInfo

func (m *ResizeOptions) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ResizeOptions) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ResizeOptions) GetResize() bool {
	if m != nil {
		return m.Resize
	}
	return false
}

func (m *ResizeOptions) GetResizeType() string {
	if m != nil {
		return m.ResizeType
	}
	return ""
}

type CropOptions struct {
	Width  uint64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Crop   bool   `protobuf:"varint,3,opt,name=crop,proto3" json:"crop,omitempty"`
}

func (m *CropOptions) Reset()         { *m = CropOptions{} }
func (m *CropOptions) String() string { return proto.CompactTextString(m) }
func (*CropOptions) ProtoMessage()    {}
func (*CropOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{3}
}
func (m *CropOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CropOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CropOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CropOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CropOptions.Merge(m, src)
}
func (m *CropOptions) XXX_Size() int {
	return m.Size()
}
func (m *CropOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CropOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CropOptions proto.InternalMessageInfo

func (m *CropOptions) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CropOptions) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CropOptions) GetCrop() bool {
	if m != nil {
		return m.Crop
	}
	return false
}

type ImageOptions struct {
	ResizeOptions *ResizeOptions `protobuf:"bytes,1,opt,name=resize_options,json=resizeOptions,proto3" json:"resize_options,omitempty"`
	CropOptions   *CropOptions   `protobuf:"bytes,2,opt,name=crop_options,json=cropOptions,proto3" json:"crop_options,omitempty"`
}

func (m *ImageOptions) Reset()         { *m = ImageOptions{} }
func (m *ImageOptions) String() string { return proto.CompactTextString(m) }
func (*ImageOptions) ProtoMessage()    {}
func (*ImageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{4}
}
func (m *ImageOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageOptions.Merge(m, src)
}
func (m *ImageOptions) XXX_Size() int {
	return m.Size()
}
func (m *ImageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ImageOptions proto.InternalMessageInfo

func (m *ImageOptions) GetResizeOptions() *ResizeOptions {
	if m != nil {
		return m.ResizeOptions
	}
	return nil
}

func (m *ImageOptions) GetCropOptions() *CropOptions {
	if m != nil {
		return m.CropOptions
	}
	return nil
}

type ImageThumbnail struct {
	Width   uint64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Gravity uint64 `protobuf:"varint,3,opt,name=gravity,proto3" json:"gravity,omitempty"`
}

func (m *ImageThumbnail) Reset()         { *m = ImageThumbnail{} }
func (m *ImageThumbnail) String() string { return proto.CompactTextString(m) }
func (*ImageThumbnail) ProtoMessage()    {}
func (*ImageThumbnail) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{5}
}
func (m *ImageThumbnail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageThumbnail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageThumbnail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageThumbnail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageThumbnail.Merge(m, src)
}
func (m *ImageThumbnail) XXX_Size() int {
	return m.Size()
}
func (m *ImageThumbnail) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageThumbnail.DiscardUnknown(m)
}

var xxx_messageInfo_ImageThumbnail proto.InternalMessageInfo

func (m *ImageThumbnail) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageThumbnail) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageThumbnail) GetGravity() uint64 {
	if m != nil {
		return m.Gravity
	}
	return 0
}

type FUploadRequest struct {
	File   string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *FUploadRequest) Reset()         { *m = FUploadRequest{} }
func (m *FUploadRequest) String() string { return proto.CompactTextString(m) }
func (*FUploadRequest) ProtoMessage()    {}
func (*FUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{6}
}
func (m *FUploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FUploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FUploadRequest.Merge(m, src)
}
func (m *FUploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *FUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FUploadRequest proto.InternalMessageInfo

func (m *FUploadRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *FUploadRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *FUploadRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FUploadResponse struct {
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Size_ string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *FUploadResponse) Reset()         { *m = FUploadResponse{} }
func (m *FUploadResponse) String() string { return proto.CompactTextString(m) }
func (*FUploadResponse) ProtoMessage()    {}
func (*FUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{7}
}
func (m *FUploadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FUploadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FUploadResponse.Merge(m, src)
}
func (m *FUploadResponse) XXX_Size() int {
	return m.Size()
}
func (m *FUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FUploadResponse proto.InternalMessageInfo

func (m *FUploadResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FUploadResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FUploadResponse) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

type UploadRequest struct {
	FileType string `protobuf:"bytes,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{8}
}
func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

type UploadResponse struct {
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Size_ string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b539b5276a431e7, []int{9}
}
func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UploadResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UploadResponse) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageUrlRequest)(nil), "storagesvc.ImageUrlRequest")
	proto.RegisterType((*ImageUrlResponse)(nil), "storagesvc.ImageUrlResponse")
	proto.RegisterType((*ResizeOptions)(nil), "storagesvc.ResizeOptions")
	proto.RegisterType((*CropOptions)(nil), "storagesvc.CropOptions")
	proto.RegisterType((*ImageOptions)(nil), "storagesvc.ImageOptions")
	proto.RegisterType((*ImageThumbnail)(nil), "storagesvc.ImageThumbnail")
	proto.RegisterType((*FUploadRequest)(nil), "storagesvc.FUploadRequest")
	proto.RegisterType((*FUploadResponse)(nil), "storagesvc.FUploadResponse")
	proto.RegisterType((*UploadRequest)(nil), "storagesvc.UploadRequest")
	proto.RegisterType((*UploadResponse)(nil), "storagesvc.UploadResponse")
}

func init() { proto.RegisterFile("storagesvc.proto", fileDescriptor_6b539b5276a431e7) }

var fileDescriptor_6b539b5276a431e7 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0x6f, 0xda, 0xd8, 0xdd, 0x7d, 0xdb, 0xdd, 0x96, 0x41, 0x6c, 0xdc, 0xd5, 0x58, 0xe7, 0x54,
	0x44, 0x3a, 0x50, 0x2f, 0xd2, 0x93, 0x28, 0x0a, 0x2a, 0x58, 0x18, 0x5b, 0x90, 0x5e, 0x4a, 0x76,
	0x77, 0x9a, 0x0c, 0xcd, 0xee, 0xc4, 0x99, 0xc9, 0x4a, 0x3c, 0x7a, 0xf6, 0x20, 0xf8, 0x6d, 0xfc,
	0x04, 0x1e, 0x0b, 0x5e, 0x3c, 0x4a, 0xeb, 0x07, 0x91, 0x99, 0x4c, 0xba, 0x09, 0xf6, 0x52, 0xf1,
	0xf6, 0x7b, 0xef, 0xe5, 0xfd, 0x7e, 0xef, 0xdf, 0x04, 0x36, 0x94, 0x16, 0x32, 0x8a, 0x99, 0x9a,
	0x8f, 0x77, 0x32, 0x29, 0xb4, 0x40, 0xb0, 0xf0, 0x0c, 0x9e, 0xc7, 0x5c, 0x27, 0xf9, 0x68, 0x67,
	0x2c, 0xa6, 0x64, 0xca, 0x74, 0x34, 0x67, 0x52, 0x31, 0xa2, 0x65, 0xae, 0x14, 0x99, 0xb0, 0x13,
	0x2d, 0x19, 0x23, 0xb1, 0x10, 0x71, 0xca, 0x74, 0xc2, 0xe5, 0x24, 0x8b, 0xa4, 0x2e, 0x48, 0x34,
	0x9b, 0x09, 0x1d, 0x69, 0x2e, 0x66, 0xaa, 0xa4, 0xc4, 0x1c, 0xd6, 0x5f, 0x4e, 0xa3, 0x98, 0x1d,
	0xca, 0x94, 0xb2, 0xf7, 0x39, 0x53, 0x1a, 0x6d, 0xc0, 0x0a, 0x9f, 0xc6, 0x81, 0xb7, 0xe5, 0x6d,
	0x77, 0xa8, 0x81, 0x68, 0x17, 0x5a, 0x22, 0xb3, 0x59, 0xc1, 0xf2, 0x96, 0xb7, 0xdd, 0xdd, 0x0d,
	0x76, 0x6a, 0xb5, 0xd9, 0xfc, 0xfd, 0x32, 0x4e, 0xab, 0x0f, 0x0d, 0x8b, 0xd2, 0x32, 0x58, 0x29,
	0x59, 0x94, 0x96, 0xf8, 0x31, 0x6c, 0x2c, 0xa4, 0x54, 0x26, 0x66, 0x8a, 0x21, 0x04, 0x7e, 0x16,
	0xe9, 0xc4, 0x89, 0x59, 0x6c, 0x32, 0x73, 0x99, 0x5a, 0xa5, 0x0e, 0x35, 0x10, 0xcf, 0xa1, 0x47,
	0x99, 0xe2, 0x1f, 0x2b, 0x15, 0x74, 0x13, 0x6e, 0x7c, 0xe0, 0x13, 0x97, 0xe7, 0xd3, 0xd2, 0x40,
	0xb7, 0x60, 0x35, 0x61, 0x3c, 0x4e, 0xb4, 0xcd, 0xf5, 0xa9, 0xb3, 0x8c, 0x5f, 0xda, 0x74, 0x5b,
	0x4d, 0x9b, 0x3a, 0x0b, 0xdd, 0x83, 0x6e, 0x89, 0x8e, 0x75, 0x91, 0xb1, 0xc0, 0xb7, 0x82, 0x50,
	0xba, 0x0e, 0x8a, 0x8c, 0xe1, 0x7d, 0xe8, 0x3e, 0x93, 0x22, 0xfb, 0x37, 0x55, 0x04, 0xfe, 0x58,
	0x8a, 0xcc, 0x69, 0x5a, 0x8c, 0x3f, 0x7b, 0xb0, 0x56, 0x1f, 0x17, 0x7a, 0x02, 0x7d, 0x57, 0x42,
	0x35, 0x60, 0xcf, 0x0e, 0xf8, 0x76, 0x7d, 0xc0, 0x8d, 0xde, 0x69, 0x4f, 0x36, 0x46, 0xb1, 0x07,
	0x6b, 0x86, 0xfa, 0xb8, 0xb9, 0xa0, 0xcd, 0x7a, 0x7e, 0xad, 0x07, 0xda, 0x1d, 0x2f, 0x0c, 0xfc,
	0x0e, 0xfa, 0xb6, 0x9a, 0x83, 0x24, 0x9f, 0x8e, 0x66, 0x11, 0x4f, 0xaf, 0xd9, 0x62, 0x00, 0xad,
	0x58, 0x46, 0x73, 0xae, 0x0b, 0xdb, 0xa5, 0x4f, 0x2b, 0x13, 0xbf, 0x81, 0xfe, 0x8b, 0xc3, 0x2c,
	0x15, 0xd1, 0xa4, 0xba, 0x2a, 0x04, 0xfe, 0x09, 0x4f, 0x59, 0xb5, 0x69, 0x83, 0x0d, 0xef, 0x28,
	0x1f, 0x9f, 0x32, 0xed, 0x96, 0xed, 0x2c, 0x73, 0x01, 0xa7, 0xac, 0xa8, 0x6e, 0xe7, 0x94, 0x15,
	0xf8, 0x35, 0xac, 0x5f, 0xf2, 0x5d, 0xe7, 0x74, 0xcc, 0x57, 0x97, 0x9b, 0xef, 0x50, 0x8b, 0xf1,
	0x43, 0xe8, 0x35, 0x6b, 0x1b, 0x42, 0xc7, 0xd4, 0x53, 0x9e, 0x41, 0xc9, 0xd7, 0x36, 0x0e, 0x7b,
	0x04, 0xaf, 0xa0, 0xff, 0xbf, 0x94, 0x77, 0xbf, 0x2d, 0x03, 0xbc, 0xbd, 0x5c, 0x0c, 0x4a, 0xa0,
	0x5d, 0xbd, 0x08, 0x34, 0xfc, 0xeb, 0x49, 0x2d, 0x9e, 0xe4, 0xe0, 0xce, 0xd5, 0xc1, 0xb2, 0x1e,
	0x7c, 0xff, 0xd3, 0x8f, 0xdf, 0x5f, 0x97, 0x87, 0x08, 0x08, 0x37, 0x21, 0x92, 0xcb, 0xf4, 0xa8,
	0x87, 0xba, 0x0b, 0x8b, 0xa0, 0x08, 0x5a, 0x6e, 0x7e, 0x68, 0x50, 0xe7, 0x6a, 0x2e, 0x69, 0x30,
	0xbc, 0x32, 0xe6, 0x64, 0xee, 0x5a, 0x99, 0x4d, 0xd4, 0x26, 0x27, 0xb9, 0x8d, 0x1c, 0x75, 0x51,
	0xa7, 0xc2, 0x04, 0x1d, 0xc3, 0xaa, 0x53, 0x68, 0x1c, 0x6f, 0x53, 0x60, 0x70, 0x55, 0xc8, 0xf1,
	0x87, 0x96, 0x3f, 0xc0, 0x2d, 0xe2, 0xe8, 0x7b, 0xb8, 0xed, 0x20, 0xd9, 0xf3, 0x1e, 0x3c, 0x0d,
	0xbe, 0x9f, 0x87, 0xde, 0xd9, 0x79, 0xe8, 0xfd, 0x3a, 0x0f, 0xbd, 0x2f, 0x17, 0xe1, 0xd2, 0xd9,
	0x45, 0xb8, 0xf4, 0xf3, 0x22, 0x5c, 0x1a, 0xad, 0xda, 0x7f, 0xd9, 0xa3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x9b, 0x5b, 0xc6, 0x32, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StoragesvcClient is the client API for Storagesvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoragesvcClient interface {
	ImageUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ImageUrlResponse, error)
	FUpload(ctx context.Context, in *FUploadRequest, opts ...grpc.CallOption) (*FUploadResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type storagesvcClient struct {
	cc *grpc.ClientConn
}

func NewStoragesvcClient(cc *grpc.ClientConn) StoragesvcClient {
	return &storagesvcClient{cc}
}

func (c *storagesvcClient) ImageUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ImageUrlResponse, error) {
	out := new(ImageUrlResponse)
	err := c.cc.Invoke(ctx, "/storagesvc.Storagesvc/ImageUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagesvcClient) FUpload(ctx context.Context, in *FUploadRequest, opts ...grpc.CallOption) (*FUploadResponse, error) {
	out := new(FUploadResponse)
	err := c.cc.Invoke(ctx, "/storagesvc.Storagesvc/FUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagesvcClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/storagesvc.Storagesvc/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoragesvcServer is the server API for Storagesvc service.
type StoragesvcServer interface {
	ImageUrl(context.Context, *ImageUrlRequest) (*ImageUrlResponse, error)
	FUpload(context.Context, *FUploadRequest) (*FUploadResponse, error)
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
}

// UnimplementedStoragesvcServer can be embedded to have forward compatible implementations.
type UnimplementedStoragesvcServer struct {
}

func (*UnimplementedStoragesvcServer) ImageUrl(ctx context.Context, req *ImageUrlRequest) (*ImageUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUrl not implemented")
}
func (*UnimplementedStoragesvcServer) FUpload(ctx context.Context, req *FUploadRequest) (*FUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FUpload not implemented")
}
func (*UnimplementedStoragesvcServer) Upload(ctx context.Context, req *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

func RegisterStoragesvcServer(s *grpc.Server, srv StoragesvcServer) {
	s.RegisterService(&_Storagesvc_serviceDesc, srv)
}

func _Storagesvc_ImageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragesvcServer).ImageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagesvc.Storagesvc/ImageUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragesvcServer).ImageUrl(ctx, req.(*ImageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storagesvc_FUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragesvcServer).FUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagesvc.Storagesvc/FUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragesvcServer).FUpload(ctx, req.(*FUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storagesvc_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragesvcServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagesvc.Storagesvc/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragesvcServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storagesvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storagesvc.Storagesvc",
	HandlerType: (*StoragesvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageUrl",
			Handler:    _Storagesvc_ImageUrl_Handler,
		},
		{
			MethodName: "FUpload",
			Handler:    _Storagesvc_FUpload_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Storagesvc_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storagesvc.proto",
}

func (m *ImageUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Img) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Img)))
		i += copy(dAtA[i:], m.Img)
	}
	if m.Options != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Options.Size()))
		n1, err1 := m.Options.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	return i, nil
}

func (m *ImageUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *ResizeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Height))
	}
	if m.Resize {
		dAtA[i] = 0x18
		i++
		if m.Resize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ResizeType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.ResizeType)))
		i += copy(dAtA[i:], m.ResizeType)
	}
	return i, nil
}

func (m *CropOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CropOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Height))
	}
	if m.Crop {
		dAtA[i] = 0x18
		i++
		if m.Crop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImageOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResizeOptions != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.ResizeOptions.Size()))
		n2, err2 := m.ResizeOptions.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.CropOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.CropOptions.Size()))
		n3, err3 := m.CropOptions.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *ImageThumbnail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageThumbnail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Height))
	}
	if m.Gravity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(m.Gravity))
	}
	return i, nil
}

func (m *FUploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FUploadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if len(m.Bucket) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *FUploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FUploadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Size_) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Size_)))
		i += copy(dAtA[i:], m.Size_)
	}
	return i, nil
}

func (m *UploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.FileType)))
		i += copy(dAtA[i:], m.FileType)
	}
	return i, nil
}

func (m *UploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Size_) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStoragesvc(dAtA, i, uint64(len(m.Size_)))
		i += copy(dAtA[i:], m.Size_)
	}
	return i, nil
}

func encodeVarintStoragesvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ImageUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Img)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *ImageUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *ResizeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovStoragesvc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovStoragesvc(uint64(m.Height))
	}
	if m.Resize {
		n += 2
	}
	l = len(m.ResizeType)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *CropOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovStoragesvc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovStoragesvc(uint64(m.Height))
	}
	if m.Crop {
		n += 2
	}
	return n
}

func (m *ImageOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResizeOptions != nil {
		l = m.ResizeOptions.Size()
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	if m.CropOptions != nil {
		l = m.CropOptions.Size()
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *ImageThumbnail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovStoragesvc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovStoragesvc(uint64(m.Height))
	}
	if m.Gravity != 0 {
		n += 1 + sovStoragesvc(uint64(m.Gravity))
	}
	return n
}

func (m *FUploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *FUploadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *UploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func (m *UploadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovStoragesvc(uint64(l))
	}
	return n
}

func sovStoragesvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoragesvc(x uint64) (n int) {
	return sovStoragesvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImageUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ImageOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resize = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResizeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CropOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CropOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CropOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Crop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResizeOptions == nil {
				m.ResizeOptions = &ResizeOptions{}
			}
			if err := m.ResizeOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CropOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CropOptions == nil {
				m.CropOptions = &CropOptions{}
			}
			if err := m.CropOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageThumbnail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageThumbnail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageThumbnail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gravity", wireType)
			}
			m.Gravity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gravity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FUploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FUploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FUploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FUploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FUploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FUploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoragesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoragesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoragesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoragesvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoragesvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoragesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoragesvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStoragesvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStoragesvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStoragesvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStoragesvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStoragesvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoragesvc   = fmt.Errorf("proto: integer overflow")
)
